{{>licenseInfo}}

/* Do not edit this file manually */

{{#operations}}

#include "{{classname}}Impl.h"

{{#apiNamespaceDeclarations}}
namespace {{this}} {
{{/apiNamespaceDeclarations}}

using namespace {{modelNamespace}};

namespace {{classname}}Impl {
namespace {
std::unordered_map<std::string, std::shared_ptr<{{baseName}}>> cubes;
std::mutex cubes_mutex;

std::shared_ptr<{{baseName}}> get_cube(const std::string &name) {
  std::lock_guard<std::mutex> guard(cubes_mutex);
  auto iter = cubes.find(name);
  if (iter == cubes.end()) {
    throw std::runtime_error("Cube " + name + " does not exist");
  }

  return iter->second;
}

}

void create_{{classVarName}}_by_id(const std::string &name, const {{baseName}}JsonObject &jsonObject) {
  {
    // check if name is valid before creating it
    std::lock_guard<std::mutex> guard(cubes_mutex);
    if (cubes.count(name) != 0) {
      throw std::runtime_error("There is already a cube with name " + name);
    }
  }
  auto ptr = std::make_shared<{{baseName}}>(name, jsonObject);
  std::unordered_map<std::string, std::shared_ptr<{{baseName}}>>::iterator iter;
  bool inserted;

  std::lock_guard<std::mutex> guard(cubes_mutex);
  std::tie(iter, inserted) = cubes.emplace(name, std::move(ptr));

  if (!inserted) {
    throw std::runtime_error("There is already a cube with name " + name);
  }
}

void replace_{{classVarName}}_by_id(const std::string &name, const {{baseName}}JsonObject &bridge){
  throw std::runtime_error("Method not supported!");
}

void delete_{{classVarName}}_by_id(const std::string &name) {
  std::lock_guard<std::mutex> guard(cubes_mutex);
  if (cubes.count(name) == 0) {
    throw std::runtime_error("Cube " + name + " does not exist");
  }
  cubes.erase(name);
}

std::vector<{{baseName}}JsonObject> read_{{classVarName}}_list_by_id() {
  std::vector<{{baseName}}JsonObject> jsonObject_vect;
  for(auto &i : cubes) {
    auto m = get_cube(i.first);
    jsonObject_vect.push_back(m->toJsonObject());
  }
  return jsonObject_vect;
}

std::vector<nlohmann::fifo_map<std::string, std::string>> read_{{classVarName}}_list_by_id_get_list() {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
  for (auto &x : cubes) {
    nlohmann::fifo_map<std::string, std::string> m;
    m["name"] = x.first;
    r.push_back(std::move(m));
  }
  return r;
}

{{#operation}}
{{^vendorExtensions.x-is-base-datamodel}}
{{^vendorExtensions.x-has-default-impl}}
/**
* @brief   {{summary}}
*
* {{notes}}*
*{{#allParams}}
* @param[in] {{paramName}} {{description}}{{^required}} (optional{{#defaultValue}}, default to {{->}}{{/defaultValue}}){{/required}}{{/allParams}}
*
* Responses:
*{{#returnType}} {{{returnType}}}{{/returnType}}
*/
{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}
{{operationIdSnakeCase}}({{#allParams}}const {{{dataType}}} &{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) {
{{^vendorExtensions.x-is-list-update}}
{{#vendorExtensions.x-call-sequence-method}}
{{^lastCall}}
  auto {{{varName}}} = {{{methodCall}}};
{{/lastCall}}
{{#lastCall}}
{{^vendorExtensions.x-is-list}}
{{#vendorExtensions.x-is-yang-action}}
{{#returnType}}  return {{{methodCall}}};{{/returnType}}
{{/vendorExtensions.x-is-yang-action}}
{{^vendorExtensions.x-is-yang-action}}
{{#returnType}}  return {{{methodCall}}}{{^returnTypeIsPrimitive}}toJsonObject(){{/returnTypeIsPrimitive}};{{/returnType}}
{{/vendorExtensions.x-is-yang-action}}
{{^returnType}}  return {{{methodCall}}};{{/returnType}}
{{/vendorExtensions.x-is-list}}
{{#vendorExtensions.x-is-list}}
{{^returnType}}
  {{{methodCall}}};
{{/returnType}}
{{#returnType}}
  auto &&{{{varName}}} = {{{methodCall}}};
  {{{returnType}}} m;
  for(auto &i : {{{varName}}})
    m.push_back(i->toJsonObject());
  return m;
{{/returnType}}
{{/vendorExtensions.x-is-list}}
{{/lastCall}}
{{/vendorExtensions.x-call-sequence-method}}
{{/vendorExtensions.x-is-list-update}}
{{#vendorExtensions.x-is-list-update}}
  throw std::runtime_error("Method not supported");
{{/vendorExtensions.x-is-list-update}}
}

{{/vendorExtensions.x-has-default-impl}}
{{/vendorExtensions.x-is-base-datamodel}}
{{/operation}}


/*
 * help related
 */

{{#operation}}
{{#vendorExtensions.x-needs-help}}
{{^vendorExtensions.x-has-default-impl}}
std::vector<nlohmann::fifo_map<std::string, std::string>> {{operationIdSnakeCase}}_get_list({{#allParams}}const {{{dataType}}} &{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
{{!!^vendorExtensions.x-is-list-update}}
{{#vendorExtensions.x-call-sequence-method}}
{{^lastCall}}
  auto &&{{{varName}}} = {{{methodCall}}};
{{/lastCall}}
{{#lastCall}}

  auto &&{{{varName}}} = {{{methodCall}}};
  for(auto &i : {{{varName}}}) {
    nlohmann::fifo_map<std::string, std::string> keys;

    {{#vendorExtensions.x-key-list}}
    {{#isEnum}}
    keys["{{keyParamName}}"] = {{classname}}JsonObject::{{{datatype}}}_to_string(i->{{getter}}());
    {{/isEnum}}
    {{^isEnum}}
    {{#isString}}
    keys["{{keyParamName}}"] = i->{{getter}}();
    {{/isString}}
    {{^isString}}
    keys["{{keyParamName}}"] = std::to_string(i->{{getter}}());
    {{/isString}}
    {{/isEnum}}
    {{/vendorExtensions.x-key-list}}

    r.push_back(keys);
  }
  return r;
{{/lastCall}}
{{/vendorExtensions.x-call-sequence-method}}
}

{{/vendorExtensions.x-has-default-impl}}
{{/vendorExtensions.x-needs-help}}
{{/operation}}

}

{{#apiNamespaceDeclarations}}
}
{{/apiNamespaceDeclarations}}

{{/operations}}
