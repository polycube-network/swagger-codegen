{{>licenseInfo}}

/* Do not edit this file manually */

{{#models}}{{#model}}
#include "{{classname}}Base.h"
{{#vendorExtensions.x-root-object}}
#include "../{{vendorExtensions.x-root-object}}.h"
{{/vendorExtensions.x-root-object}}
{{#vendorExtensions.x-is-root-object}}

{{classname}}Base::{{classname}}Base({{#vars}}{{#vendorExtensions.x-is-key}}const {{{datatype}}} {{{name}}}{{/vendorExtensions.x-is-key}}{{/vars}}) {
  logger()->set_pattern("[%Y-%m-%d %H:%M:%S.%e] [{{classname}}] [%n] [%l] %v");
}
{{/vendorExtensions.x-is-root-object}}

{{#vendorExtensions.x-is-port-class}}
{{classname}}Base::{{classname}}Base(polycube::service::Cube<Ports> &parent,
    {{#vendorExtensions.x-classname-inherited}}{{{this}}} port{{/vendorExtensions.x-classname-inherited}})
    : Port(port), parent_(dynamic_cast<{{vendorExtensions.x-parent}} &>(parent)) {}
{{/vendorExtensions.x-is-port-class}}

{{^vendorExtensions.x-is-root-object}}
{{^vendorExtensions.x-is-port-class}}
{{classname}}Base::{{classname}}Base({{{vendorExtensions.x-parent}}} &parent)
    : parent_(parent) {}
{{/vendorExtensions.x-is-port-class}}
{{/vendorExtensions.x-is-root-object}}

{{classname}}Base::~{{classname}}Base() {}

void {{classname}}Base::update(const {{classname}}JsonObject &conf) {
{{#vendorExtensions.x-is-root-object}}
  Cube::set_conf(conf.getBase());
{{/vendorExtensions.x-is-root-object}}
{{#vendorExtensions.x-is-port-class}}
  Port::set_conf(conf.getBase());
{{/vendorExtensions.x-is-port-class}}

{{#vars}}
{{^vendorExtensions.x-is-base-datamodel}}
{{^vendorExtensions.x-is-key}}
{{^isReadOnly}}
  if (conf.{{name}}IsSet()) {
{{^isNotContainer}}
    for (auto &i : conf.{{getter}}()) {
{{#vendorExtensions.x-key-list}}
      auto {{varName}} = i.{{getter}}();
{{/vendorExtensions.x-key-list}}
      auto m = get{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}{{varName}}{{^lastKey}}, {{/lastKey}}{{/vendorExtensions.x-key-list}});
      m->update(i);
    }
{{/isNotContainer}}
{{#isNotContainer}}
{{#isPrimitiveType}}
    {{setter}}(conf.{{getter}}());
{{/isPrimitiveType}}
{{^isPrimitiveType}}
    auto m = {{getter}}();
    m->update(conf.{{getter}}());
{{/isPrimitiveType}}
{{/isNotContainer}}
  }
{{/isReadOnly}}
{{/vendorExtensions.x-is-key}}
{{/vendorExtensions.x-is-base-datamodel}}
{{/vars}}
}

{{classname}}JsonObject {{classname}}Base::toJsonObject() {
  {{classname}}JsonObject conf;
{{#vendorExtensions.x-is-root-object}}
  conf.setBase(Cube::to_json());
{{/vendorExtensions.x-is-root-object}}
{{#vendorExtensions.x-is-port-class}}
  conf.setBase(Port::to_json());
{{/vendorExtensions.x-is-port-class}}

{{#vars}}
{{^vendorExtensions.x-is-base-datamodel}}
{{#isNotContainer}}
{{#isPrimitiveType}}
  conf.{{setter}}({{getter}}());
{{/isPrimitiveType}}
{{^isPrimitiveType}}
  conf.{{setter}}({{getter}}()->toJsonObject());
{{/isPrimitiveType}}
{{/isNotContainer}}
{{^isNotContainer}}
{{#vendorExtensions.x-is-port-class}}
  for (auto &i : {{getter}}List()) {
    conf.add{{complexType}}(i->toJsonObject());
  }
{{/vendorExtensions.x-is-port-class}}
{{^vendorExtensions.x-is-port-class}}
  for(auto &i : {{getter}}List()) {
    conf.add{{complexType}}(i->toJsonObject());
  }
{{/vendorExtensions.x-is-port-class}}
{{/isNotContainer}}
{{/vendorExtensions.x-is-base-datamodel}}
{{/vars}}

  return conf;
}
{{#vars}}
{{^isNotContainer}}
void {{classname}}Base::add{{nameInCamelCase}}List(const std::vector<{{complexType}}JsonObject> &conf) {
  for (auto &i : conf) {
    {{#vendorExtensions.x-key-list}}
    {{type}} {{varName}}_ = i.{{getter}}();
    {{/vendorExtensions.x-key-list}}
    add{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}{{varName}}_, {{/vendorExtensions.x-key-list}}i);
  }
}

void {{classname}}Base::replace{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}const {{type}} &{{varName}}, {{/vendorExtensions.x-key-list}}const {{complexType}}JsonObject &conf) {
  del{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}{{varName}}{{^lastKey}}, {{/lastKey}}{{/vendorExtensions.x-key-list}});
  {{#vendorExtensions.x-key-list}}
  {{type}} {{varName}}_ = conf.{{getter}}();
  {{/vendorExtensions.x-key-list}}
  add{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}{{varName}}_, {{/vendorExtensions.x-key-list}}conf);
}

void {{classname}}Base::del{{nameInCamelCase}}List() {
  auto elements = get{{nameInCamelCase}}List();
  for (auto &i : elements) {
    {{#vendorExtensions.x-key-list}}
    {{type}} {{varName}}_ = i->{{getter}}();
    {{/vendorExtensions.x-key-list}}
    del{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}{{varName}}_{{^lastKey}}, {{/lastKey}}{{/vendorExtensions.x-key-list}});
  }
}
{{/isNotContainer}}
{{#isNotContainer}}
{{^isPrimitiveType}}
{{^vendorExtensions.x-is-key}}
{{^isReadOnly}}

void {{classname}}Base::replace{{nameInCamelCase}}(const {{complexType}}JsonObject &conf) {
  // TODO: This is a basic default implementation, maybe you want to improve it
  del{{nameInCamelCase}}();
  {{#vendorExtensions.x-key-list}}
  {{type}} {{varName}}_ = conf.{{getter}}();
  {{/vendorExtensions.x-key-list}}
  add{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}{{varName}}_, {{/vendorExtensions.x-key-list}}conf);
}
{{/isReadOnly}}
{{/vendorExtensions.x-is-key}}
{{/isPrimitiveType}}
{{/isNotContainer}}
{{#vendorExtensions.x-is-port-class}}

void {{classname}}Base::add{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}const {{type}} &{{varName}}, {{/vendorExtensions.x-key-list}}const {{complexType}}JsonObject &conf) {
  add_port<PortsJsonObject>(name, conf);
}

void {{classname}}Base::del{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}const {{type}} &{{varName}}{{^lastKey}}, {{/lastKey}}{{/vendorExtensions.x-key-list}}) {
  remove_port(name);
}

std::shared_ptr<{{complexType}}> {{classname}}Base::get{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}const {{type}} &{{varName}}{{^lastKey}}, {{/lastKey}}{{/vendorExtensions.x-key-list}}) {
  return get_port(name);
}

std::vector<std::shared_ptr<{{complexType}}>> {{classname}}Base::get{{nameInCamelCase}}List() {
  return get_ports();
}
{{/vendorExtensions.x-is-port-class}}
{{/vars}}

{{#vendorExtensions.x-parent}}
std::shared_ptr<spdlog::logger> {{classname}}Base::logger() {
  return parent_.logger();
}
{{/vendorExtensions.x-parent}}
{{/model}}{{/models}}
