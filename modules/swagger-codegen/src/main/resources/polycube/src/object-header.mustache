{{>licenseInfo}}

#pragma once

{{#models}}{{#model}}
#include "../base/{{classname}}Base.h"

{{#vendorExtensions.x-interface-imports}}
#include "{{{this}}}.h"
{{/vendorExtensions.x-interface-imports}}

{{#vendorExtensions.x-parent}}
class {{{this}}};
{{/vendorExtensions.x-parent}}

using namespace {{modelNamespace}};

class {{classname}} : public {{classname}}Base {
 public:
{{#vendorExtensions.x-is-root-object}}
  {{classname}}({{#vars}}{{#vendorExtensions.x-is-key}}const {{{datatype}}} {{{name}}}, {{/vendorExtensions.x-is-key}}{{/vars}}const {{classname}}JsonObject &conf);
{{/vendorExtensions.x-is-root-object}}
{{#vendorExtensions.x-is-port-class}}
  {{classname}}(polycube::service::Cube<Ports> &parent,
      {{#vendorExtensions.x-classname-inherited}}{{{this}}} port,
      {{/vendorExtensions.x-classname-inherited}}const {{classname}}JsonObject &conf);
{{/vendorExtensions.x-is-port-class}}
{{^vendorExtensions.x-is-root-object}}
{{^vendorExtensions.x-is-port-class}}
  {{classname}}({{{vendorExtensions.x-parent}}} &parent, const {{classname}}JsonObject &conf);
{{/vendorExtensions.x-is-port-class}}
{{/vendorExtensions.x-is-root-object}}
  virtual ~{{classname}}();
{{#vendorExtensions.x-is-root-object}}

  void packet_in({{vendorExtensions.x-child-ports-classname}} &port,
      polycube::service::PacketInMetadata &md,
      const std::vector<uint8_t> &packet) override;
{{/vendorExtensions.x-is-root-object}}
{{#vars}}
{{^vendorExtensions.x-has-default-impl}}
{{^vendorExtensions.x-is-base-datamodel}}

  /// <summary>
  ///{{#description}} {{description}}{{/description}}
  /// </summary>
{{^isNotContainer}}
  std::shared_ptr<{{complexType}}> get{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}const {{type}} &{{varName}}{{^lastKey}}, {{/lastKey}}{{/vendorExtensions.x-key-list}}) override;
  std::vector<std::shared_ptr<{{complexType}}>> get{{nameInCamelCase}}List() override;
  void add{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}const {{type}} &{{varName}}, {{/vendorExtensions.x-key-list}}const {{complexType}}JsonObject &conf) override;
  void add{{nameInCamelCase}}List(const std::vector<{{complexType}}JsonObject> &conf) override;
  void replace{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}const {{type}} &{{varName}}, {{/vendorExtensions.x-key-list}}const {{complexType}}JsonObject &conf) override;
  void del{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}const {{type}} &{{varName}}{{^lastKey}}, {{/lastKey}}{{/vendorExtensions.x-key-list}}) override;
  void del{{nameInCamelCase}}List() override;
{{/isNotContainer}}
{{#isNotContainer}}
{{#isPrimitiveType}}
  {{{datatype}}} {{getter}}() override;
{{^vendorExtensions.x-is-key}}
{{^isReadOnly}}
  void {{setter}}(const {{{datatype}}} &value) override;
{{/isReadOnly}}
{{/vendorExtensions.x-is-key}}
{{/isPrimitiveType}}
{{^isPrimitiveType}}
  std::shared_ptr<{{complexType}}> get{{nameInCamelCase}}() override;
{{^vendorExtensions.x-is-key}}
{{^isReadOnly}}
  void add{{nameInCamelCase}}(const {{complexType}}JsonObject &value) override;
  void replace{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}const {{type}} &{{name}}, {{/vendorExtensions.x-key-list}}const {{complexType}}JsonObject &conf) override;
  void del{{nameInCamelCase}}() override;
{{/isReadOnly}}
{{/vendorExtensions.x-is-key}}
{{/isPrimitiveType}}
{{/isNotContainer}}
{{/vendorExtensions.x-is-base-datamodel}}
{{/vendorExtensions.x-has-default-impl}}
{{/vars}}
{{#vendorExtensions.x-has-yang-actions}}

{{#vendorExtensions.x-yang-actions}}
  {{#x-yang-action-has-output}}{{x-yang-action-output-object}}JsonObject{{/x-yang-action-has-output}}{{^x-yang-action-has-output}}void{{/x-yang-action-has-output}} {{x-yang-action-name-lower-camelcase}}({{#x-yang-action-has-input}}{{x-yang-action-input-object}}JsonObject input{{/x-yang-action-has-input}}) override;
{{/vendorExtensions.x-yang-actions}}
{{/vendorExtensions.x-has-yang-actions}}
};
{{/model}}
{{/models}}
